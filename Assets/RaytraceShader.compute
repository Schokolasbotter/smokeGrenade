// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSRaytrace
#pragma kernel CS_Noise

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _ResultTexture;

int _TextureWidth;
int _TextureHeight;

StructuredBuffer<int> _SmokeVoxels;
int _VoxelsX, _VoxelsY, VoxelsZ;


float3 _BoundsExtent;
float _VoxelResolution;

float4x4 _invProjectionMatrix;
float4x4 _CamToWorldMatrix;
float3 camPosWS;

float3 _SmokeOrigin;
float _SmokeRadius;
float _Smoothing;
float _DensityMult;
float _RayMaxLength;


///////////////////////////////////////////////////////

RWTexture2D<float4> _NoiseTexture;
uint2 _NoiseResolution;
float _Scale;

[numthreads(8, 8, 1)]
void CS_Noise(uint3 id : SV_DispatchThreadID){
    uint width = _NoiseResolution.x;
    uint height = _NoiseResolution.y;

    if (id.x >= width || id.y >= height) return;
    float2 uv = float2(id.x, id.y) / _NoiseResolution;
    uv *= _Scale;

    float2 bestPoint;
    float minDist = 1.0; // Large initial distance

    // Sample random points in the neighborhood
    int range = 2; // Search range for neighboring seeds
    for (int j = -range; j <= range; j++)
    {
        for (int i = -range; i <= range; i++)
        {
            float2 cell = floor(uv) + float2(i, j);
            float2 kPoint = cell + frac(sin(dot(cell, float2(12.9898, 78.233))) * 43758.5453);
            float dist = distance(uv, kPoint);
            if (dist < minDist)
            {
                minDist = dist;
                bestPoint = kPoint;
            }
        }
    }

    // Color based on the distance
    float color = minDist;
    _NoiseTexture[id.xy] = float4(color, color, color, 1.0);

}

///////////////////////////////////////////////////////


int getSmokeVoxel(float3 position) {
   // int returnVal = -1;
    // Check if the world space position is currently within the bounds
    // If they are not, return 0;
    

    if (position.x < -_BoundsExtent.x || position.x > _BoundsExtent.x ||
        position.y < -_BoundsExtent.y + _BoundsExtent.y || position.y > _BoundsExtent.y+ _BoundsExtent.y ||
        position.z < -_BoundsExtent.z || position.z > _BoundsExtent.z)
    {
        return -1;
    }
    

    float3 adjustedPosition = position + float3(_BoundsExtent.x, 0, _BoundsExtent.z);

    adjustedPosition /= _VoxelResolution;
    adjustedPosition = floor(adjustedPosition);
   // adjustedPosition *= _VoxelResolution;

    int index = adjustedPosition.z * (_VoxelsX * _VoxelsY) + adjustedPosition.y * _VoxelsX + adjustedPosition.x;
    return _SmokeVoxels[index];

}

float sampleDensity(float3 pos) {
    float distanceFromOrigin = length(pos - _SmokeOrigin); // Calculate the Euclidean distance from the origin
    float normalizedDistance = distanceFromOrigin / _SmokeRadius; // Normalize based on the smoke radius
    // Smoothstep to create a soft edge as it approaches the boundary of the smoke radius


    return 1- smoothstep(_Smoothing,1.,normalizedDistance); // Softens edges between 80% and 100% of the radius


}

[numthreads(8, 8, 1)]
void CSRaytrace(uint3 id : SV_DispatchThreadID)
{
    float3 origin = camPosWS;

    float2 uv = (id.xy / float2(_TextureWidth, _TextureHeight)); //gets the UV Coordinates
    float4 ndcCS = float4(uv.x * 2-1, uv.y * 2-1, 0, 1); //converts the uv coordinates to normalized device coordinates ndc in clip space
    float3 viewDir = mul(_invProjectionMatrix, ndcCS).xyz;
    float3 rayVector = mul(_CamToWorldMatrix, float4(viewDir, 0)).xyz;
    rayVector = normalize(rayVector);

    float4 col = float4(0.0, 0.0, 0.0, 0.0);  // Initialize color

    float3 positionWS = origin;

    uint rayIndex = id.y * _TextureWidth + id.x;

    float length = 0;
    float stepSize =0.5;
    float smokeValue = -1;

    // Ray marching loop
    while (smokeValue <= 0 && length < _RayMaxLength) {
        length += stepSize;
        positionWS = origin + length * rayVector;
        smokeValue = getSmokeVoxel(positionWS);
    }


    if (smokeValue == 1) {
        int stage2StepMax = 20;
        int stage2StepNum = 0;
        float accumulatedDensity = 0;
        while (stage2StepNum < stage2StepMax) {

            float3 samplePoint = origin + length * rayVector;
            accumulatedDensity += saturate(sampleDensity(samplePoint)) * _DensityMult;

            length += stepSize;
            col = float4(0.4, 0.4, 0.4, accumulatedDensity);
            stage2StepNum++;
        }
    }
    
    // Output the color to the render texture
    _ResultTexture[id.xy] = col;
}
